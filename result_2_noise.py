{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f115782",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "huizong1=np.loadtxt('E:/alpha_0.35/huizong_A_0.25')\n",
    "huizong2=np.loadtxt('E:/alpha_0.35/huizong_B_0.25')\n",
    "huizong=np.loadtxt('E:/alpha_0.35/huizong_0.25')\n",
    "\n",
    "average_1=[]\n",
    "average_2=[]\n",
    "for h in range(len(huizong1)):\n",
    "    average1= np.mean(huizong1[h])\n",
    "    average_1.append(average1)\n",
    "plt.scatter(np.arange(0,39.1,0.1),average_1,s=1, c = \"c\",label=\"Mean_rA\")\n",
    "\n",
    "for i in range(len(huizong2)):\n",
    "    average2= np.mean(huizong2[i])\n",
    "    average_2.append(average2)\n",
    "plt.scatter(np.arange(0,39.1,0.1),average_2,s=1, c = \"m\",label=\"Mean_rB\")\n",
    "\n",
    "\n",
    "Nt_breed1 = []\n",
    "for h in range(0,len(huizong),1):\n",
    "    mean1= np.mean(huizong[h])\n",
    "    Nt_breed1.append(mean1)\n",
    "plt.scatter(np.arange(0,39.1,0.1),np.log(Nt_breed1),s=1, c = \"c\",label=\"Nt_breed\")\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a272343",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 创建新列表来保存添加了噪声的数据\n",
    "huizong1_noisy = []\n",
    "huizong2_noisy = []\n",
    "\n",
    "# 遍历并为每个子列表中的数据添加噪声\n",
    "for i in range(len(huizong1)):\n",
    "    # 创建新的子列表来保存添加了噪声的数据\n",
    "    noisy_sublist = []\n",
    "    for j in range(len(huizong1[i])):\n",
    "        noise = np.random.normal(0, 0.01)\n",
    "        noisy_value = huizong1[i][j] + noise\n",
    "        noisy_sublist.append(noisy_value)\n",
    "    huizong1_noisy.append(noisy_sublist)\n",
    "\n",
    "for i in range(len(huizong2)):\n",
    "    # 创建新的子列表来保存添加了噪声的数据\n",
    "    noisy_sublist = []\n",
    "    for j in range(len(huizong2[i])):\n",
    "        noise = np.random.normal(0, 0.01)\n",
    "        noisy_value = huizong2[i][j] + noise\n",
    "        noisy_sublist.append(noisy_value)\n",
    "    huizong2_noisy.append(noisy_sublist)\n",
    "average_n1=[]\n",
    "average_n2=[]\n",
    "for h in range(len(huizong1_noisy)):\n",
    "    average1= np.mean(huizong1_noisy[h])\n",
    "    average_n1.append(average1)\n",
    "plt.scatter(np.arange(0,39.1,0.1),average_n1,s=1, c = \"c\",label=\"Mean_rA\")\n",
    "\n",
    "for i in range(len(huizong2_noisy)):\n",
    "    average2= np.mean(huizong2_noisy[i])\n",
    "    average_n2.append(average2)\n",
    "plt.scatter(np.arange(0,39.1,0.1),average_n2,s=1, c = \"m\",label=\"Mean_rB\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "582e6282",
   "metadata": {},
   "outputs": [],
   "source": [
    "#时间间隔增大为原来的倍数\n",
    "\n",
    "n = 1\n",
    "ave_new = []\n",
    "time_new = []\n",
    "tt = []\n",
    "for i in range(0, len(average_n1), n):\n",
    "    ave_1 = average_n1[i:i + n]\n",
    "    ave_new.append(ave_1)\n",
    "for j in np.arange(0, 39.1, 0.1):\n",
    "    tt.append(j)\n",
    "for k in range(0, len(tt), n):\n",
    "    time_1 = tt[k:k + n]\n",
    "    time_new.append(time_1)\n",
    "var_1=[]\n",
    "var_2=[]\n",
    "Nt_var1 = []\n",
    "lambda1 = 0.4\n",
    "lambda2 = 0.2\n",
    "alpha = 0.35\n",
    "beta = 0.25\n",
    "for h in range(0,len(huizong1_noisy),n):\n",
    "    average1= np.mean(huizong1_noisy[h])\n",
    "    var1= np.var(huizong1_noisy[h])\n",
    "    Nt_var_1 = ((2*lambda1*alpha-2*lambda2*beta+lambda2-lambda1)*average1-lambda2+2*lambda2*beta)/(2*(lambda2-lambda1)*var1)\n",
    "    Nt_var1.append(Nt_var_1)\n",
    "\n",
    "plt.scatter(np.arange(0.1,39.1,0.1),Nt_var1[1:],s=1, c = \"c\",label=\"Nt_var\")\n",
    "plt.legend()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
